'use strict';
var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _reactRedux = require('react-redux');
var _enzyme = require('enzyme');
var _reduxTestUtils = require('redux-test-utils');
var _enzymeRedux = require('enzyme-redux');

var _reactTestRenderer = require('react-test-renderer');var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);
var _app = require('../../src/components/app');var _app2 = _interopRequireDefault(_app);
var _unit = require('../../src/components/unit');var _unit2 = _interopRequireDefault(_unit);
var _tick = require('../../src/containers/tick');var _tick2 = _interopRequireDefault(_tick);
var _universe = require('../../src/containers/universe');var _universe2 = _interopRequireDefault(_universe);
var _header = require('../../src/components/header');var _header2 = _interopRequireDefault(_header);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

/*
                                                                                                                                                                                                  describe('App' , () => {
                                                                                                                                                                                                    let component;
                                                                                                                                                                                                  
                                                                                                                                                                                                    beforeEach(() => {
                                                                                                                                                                                                      component = renderComponent(App);
                                                                                                                                                                                                    });
                                                                                                                                                                                                  
                                                                                                                                                                                                    it('renders something', () => {
                                                                                                                                                                                                      expect(component).to.exist;
                                                                                                                                                                                                    });
                                                                                                                                                                                                  });
                                                                                                                                                                                                  */ //import {shallowWithStore} from '../shallowWithStore';


describe('header', function () {
  it('renders header component as expected', function () {
    var headerComponent = _reactTestRenderer2.default.create(
    _react2.default.createElement(_header2.default, null));


    var json = headerComponent.toJSON();
    expect(json).toMatchSnapshot();
  });
});

/*
    describe('tick', () =>{
      it('renders with form and button', () =>{
        const action = {
            type: 'FETCH_STATE',
          };
          const mapDispatchToProps = (dispatch) => ({
            dispatchProp() {
              dispatch(action);
            },
          });
          const store = createMockStore();
    
          const ConnectedComponent = connect(mapDispatchToProps)(<Tick/>);
          const component = shallowWithStore(<ConnectedComponent />, store);
          component.props().dispatchProp();
          expect(store.isActionDispatched(action)).toBe(true);
      })
    });
    */ //import { renderComponent , expect } from '../test_helper';
describe('tick', function () {
  var ReactComponent = function ReactComponent() {return _react2.default.createElement('div', null, 'dummy component');};
  describe('state', function () {
    it('works', function () {
      var expectedState = 'expectedState';
      var mapStateToProps = function mapStateToProps(state) {return {
          state: state };};

      var ConnectedComponent = (0, _reactRedux.connect)(mapStateToProps)(ReactComponent);
      var component = (0, _enzymeRedux.shallowWithStore)(_react2.default.createElement(ConnectedComponent, null), (0, _reduxTestUtils.createMockStore)(expectedState));
      var x = component.dive().find('form > div> input');
      if (!x) {
        console.log(x);
      }
      expect(component.dive().find('form')).to.exist;
      expect(component.props().state).toBe(expectedState);
    });
  });

  describe('dispatch', function () {
    var action = {
      type: 'type' };

    var mapDispatchToProps = function mapDispatchToProps(dispatch) {return {
        dispatchProp: function dispatchProp() {
          dispatch(action);
        } };};

    var store = (0, _reduxTestUtils.createMockStore)();
    var ConnectedComponent = (0, _reactRedux.connect)(undefined, mapDispatchToProps)(ReactComponent);
    var component = (0, _enzymeRedux.shallowWithStore)(_react2.default.createElement(ConnectedComponent, null), store);
    /*
                                                                                                                            it('gets rendered with a form', () => {
                                                                                                                              expect(component).to.not.be.undefined;
                                                                                                                            });
                                                                                                                        */
    it('dispatches action', function () {
      component.props().dispatchProp();
      expect(store.isActionDispatched(action)).toBe(true);
    });
  });
});

/*
    describe('unit', () => {
      it('unit is rendered as expected', ()=>{
    
        const wrapper = mount(<Unit data=
        {
          {
            cellState:1,
            key:'row 1, col 1'
          }
        }/>);
        expect(wrapper.find('td').hasClass('bg-suggess')).to.equal(true);
      });
    });
    */