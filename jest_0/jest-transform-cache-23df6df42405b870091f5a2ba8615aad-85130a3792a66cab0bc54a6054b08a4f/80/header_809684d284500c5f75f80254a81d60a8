"use strict";Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _react = require("react");var _react2 = _interopRequireDefault(_react);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

Header = function (_Component) {_inherits(Header, _Component);
  function Header(props) {_classCallCheck(this, Header);var _this = _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).call(this,
    props));
    _this.state = {};return _this;
  }_createClass(Header, [{ key: "render", value: function render()

    {
      return (
        _react2.default.createElement("div", { className: "jumbotron" },
          _react2.default.createElement("h1", null, "Conways Game Of Life"),
          _react2.default.createElement("div", null, "The universe of the Game of Life is an infinite two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, live or dead. Every cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur:",



            _react2.default.createElement("ul", null,
              _react2.default.createElement("li", null, "Any live cell with fewer than two live neighbors dies, as if caused by under-population."),
              _react2.default.createElement("li", null, "Any live cell with two or three live neighbors\u2019 lives on to the next generation."),
              _react2.default.createElement("li", null, "Any live cell with more than three live neighbors dies, as if by overcrowding."),
              _react2.default.createElement("li", null, "Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.")), "The initial pattern constitutes the seed of the system. The first generation is created by applying the above rules simultaneously to every cell in the seed. Births and deaths occur simultaneously, and the discrete moment at which this happens is sometimes called a tick (in other words, each generation is a pure function of the preceding one). The rules continue to be applied repeatedly to create further generations.")));








    } }]);return Header;}(_react.Component);exports.default = Header;