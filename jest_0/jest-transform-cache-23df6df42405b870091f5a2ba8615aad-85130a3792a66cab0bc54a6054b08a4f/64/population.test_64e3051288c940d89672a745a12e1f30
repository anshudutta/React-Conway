"use strict";var _population = require("../../middleware/population");var _population2 = _interopRequireDefault(_population);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe("generate new population", function () {
  it("creates a new universe from scratch", function () {
    var population = populator.regenerate(2, 2);
    expect(population.rows).equal(2);
    expect(population.cols).equal(2);
    expect(population.cells).to.not.be.undefined;
  });
});

describe("test known patterns", function () {

  it("block pattern", function () {
    var block = new Array();
    block.push(new Cell(0, 0, 1));
    block.push(new Cell(0, 1, 1));
    block.push(new Cell(1, 0, 1));
    block.push(new Cell(1, 1, 1));

    var expected = block.map(function (a) {return Object.assign({}, a);});
    var actual = populator.regenerate(2, 2, block);
    expect(expected).to.deep.equal(actual.cells);

  });

  it("bloat pattern", function () {
    var bloat = new Array();
    bloat.push(new Cell(0, 0, 1));
    bloat.push(new Cell(0, 1, 1));
    bloat.push(new Cell(0, 2, 0));
    bloat.push(new Cell(1, 0, 1));
    bloat.push(new Cell(1, 1, 0));
    bloat.push(new Cell(1, 2, 1));
    bloat.push(new Cell(2, 0, 0));
    bloat.push(new Cell(2, 1, 1));
    bloat.push(new Cell(2, 2, 0));

    var expected = bloat.map(function (a) {return Object.assign({}, a);});
    var actual = populator.regenerate(3, 3, bloat);
    expect(expected).to.deep.equal(actual.cells);

  });

  it("blinker pattern", function () {

  });

});